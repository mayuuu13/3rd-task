To meet the requirements of your task, we'll need to work through the following steps using Pandas for data manipulation and Seaborn/Matplotlib for visualization:

1. Modify cholesterol and gluc values:

Set the values to 0 where they are 1.

Set the values to 1 where they are greater than 1.



2. Convert data to long format and create a catplot:

Use the Pandas melt() function to transform the data into long format.

Use seaborn.catplot() to create a chart for each value of cardio, showing the value counts of categorical features.



3. Clean the data:

Filter out rows where diastolic blood pressure (ap_lo) is higher than systolic blood pressure (ap_hi).

Remove outliers in height and weight based on the 2.5th and 97.5th percentiles.



4. Create and plot a correlation matrix:

Generate a correlation matrix for the dataset using df.corr().

Plot the matrix using Seaborn’s heatmap(), masking the upper triangle.




I'll now walk through the Python code for these steps.

Step 1: Modify cholesterol and gluc values

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Assuming the dataset is loaded into a DataFrame called df
# df = pd.read_csv('your_dataset.csv')

# Replace cholesterol and gluc values
df['cholesterol'] = df['cholesterol'].apply(lambda x: 0 if x == 1 else 1)
df['gluc'] = df['gluc'].apply(lambda x: 0 if x == 1 else 1)

Step 2: Convert to long format and create a catplot

# Convert the dataframe into long format
df_long = pd.melt(df, id_vars=['cardio'], value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'], 
                  var_name='variable', value_name='value')

# Create a categorical plot for each 'cardio' value
sns.catplot(x='variable', hue='value', col='cardio', data=df_long, kind='count')
plt.show()

Step 3: Clean the data

# Filter out incorrect data where ap_lo is higher than ap_hi
df = df[df['ap_lo'] <= df['ap_hi']]

# Filter out height and weight outliers based on 2.5th and 97.5th percentiles
height_lower_bound = df['height'].quantile(0.025)
height_upper_bound = df['height'].quantile(0.975)
df = df[(df['height'] >= height_lower_bound) & (df['height'] <= height_upper_bound)]

weight_lower_bound = df['weight'].quantile(0.025)
weight_upper_bound = df['weight'].quantile(0.975)
df = df[(df['weight'] >= weight_lower_bound) & (df['weight'] <= weight_upper_bound)]

Step 4: Create and plot a correlation matrix

# Create the correlation matrix
corr_matrix = df.corr()

# Create a mask for the upper triangle
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='coolwarm', square=True)
plt.show()

Final Checks

The data has been processed and visualized as requested. If you’re working with test_module.py, ensure that the transformations match the test assertions. Here's how to proceed:

Ensure each function corresponds to an action in your task.

Add appropriate unit tests for the data-cleaning and visualization logic.


Would you like further guidance on specific unit tests or additional analysis?

